// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v3.20.3
// source: board.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";
import { Task } from "./task";

export const protobufPackage = "";

export interface Board {
  id: number;
  name: string;
  description: string;
  createdAt: string;
  tasks: Task[];
}

export interface CreateBoardRequest {
  name: string;
  description: string;
}

export interface CreateBoardResponse {
  board: Board | undefined;
}

export interface DeleteBoardRequest {
  id: number;
}

export interface DeleteBoardResponse {
  success: boolean;
}

export interface ListBoardsRequest {
}

export interface ListBoardsResponse {
  boards: Board[];
}

export interface GetBoardByIdRequest {
  id: number;
}

export interface GetBoardByIdResponse {
  board: Board | undefined;
}

function createBaseBoard(): Board {
  return { id: 0, name: "", description: "", createdAt: "", tasks: [] };
}

export const Board: MessageFns<Board> = {
  encode(message: Board, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.name !== "") {
      writer.uint32(18).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.createdAt !== "") {
      writer.uint32(34).string(message.createdAt);
    }
    for (const v of message.tasks) {
      Task.encode(v!, writer.uint32(42).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Board {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseBoard();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 34) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
        case 5: {
          if (tag !== 42) {
            break;
          }

          message.tasks.push(Task.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Board {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
      tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => Task.fromJSON(e)) : [],
    };
  },

  toJSON(message: Board): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => Task.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Board>, I>>(base?: I): Board {
    return Board.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Board>, I>>(object: I): Board {
    const message = createBaseBoard();
    message.id = object.id ?? 0;
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    message.createdAt = object.createdAt ?? "";
    message.tasks = object.tasks?.map((e) => Task.fromPartial(e)) || [];
    return message;
  },
};

function createBaseCreateBoardRequest(): CreateBoardRequest {
  return { name: "", description: "" };
}

export const CreateBoardRequest: MessageFns<CreateBoardRequest> = {
  encode(message: CreateBoardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.name !== "") {
      writer.uint32(10).string(message.name);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBoardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBoardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.name = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBoardRequest {
    return {
      name: isSet(object.name) ? globalThis.String(object.name) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
    };
  },

  toJSON(message: CreateBoardRequest): unknown {
    const obj: any = {};
    if (message.name !== "") {
      obj.name = message.name;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBoardRequest>, I>>(base?: I): CreateBoardRequest {
    return CreateBoardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBoardRequest>, I>>(object: I): CreateBoardRequest {
    const message = createBaseCreateBoardRequest();
    message.name = object.name ?? "";
    message.description = object.description ?? "";
    return message;
  },
};

function createBaseCreateBoardResponse(): CreateBoardResponse {
  return { board: undefined };
}

export const CreateBoardResponse: MessageFns<CreateBoardResponse> = {
  encode(message: CreateBoardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.board !== undefined) {
      Board.encode(message.board, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateBoardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateBoardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.board = Board.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateBoardResponse {
    return { board: isSet(object.board) ? Board.fromJSON(object.board) : undefined };
  },

  toJSON(message: CreateBoardResponse): unknown {
    const obj: any = {};
    if (message.board !== undefined) {
      obj.board = Board.toJSON(message.board);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateBoardResponse>, I>>(base?: I): CreateBoardResponse {
    return CreateBoardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateBoardResponse>, I>>(object: I): CreateBoardResponse {
    const message = createBaseCreateBoardResponse();
    message.board = (object.board !== undefined && object.board !== null) ? Board.fromPartial(object.board) : undefined;
    return message;
  },
};

function createBaseDeleteBoardRequest(): DeleteBoardRequest {
  return { id: 0 };
}

export const DeleteBoardRequest: MessageFns<DeleteBoardRequest> = {
  encode(message: DeleteBoardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBoardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBoardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBoardRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteBoardRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBoardRequest>, I>>(base?: I): DeleteBoardRequest {
    return DeleteBoardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBoardRequest>, I>>(object: I): DeleteBoardRequest {
    const message = createBaseDeleteBoardRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseDeleteBoardResponse(): DeleteBoardResponse {
  return { success: false };
}

export const DeleteBoardResponse: MessageFns<DeleteBoardResponse> = {
  encode(message: DeleteBoardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteBoardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteBoardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteBoardResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteBoardResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteBoardResponse>, I>>(base?: I): DeleteBoardResponse {
    return DeleteBoardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteBoardResponse>, I>>(object: I): DeleteBoardResponse {
    const message = createBaseDeleteBoardResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseListBoardsRequest(): ListBoardsRequest {
  return {};
}

export const ListBoardsRequest: MessageFns<ListBoardsRequest> = {
  encode(_: ListBoardsRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBoardsRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBoardsRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(_: any): ListBoardsRequest {
    return {};
  },

  toJSON(_: ListBoardsRequest): unknown {
    const obj: any = {};
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBoardsRequest>, I>>(base?: I): ListBoardsRequest {
    return ListBoardsRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBoardsRequest>, I>>(_: I): ListBoardsRequest {
    const message = createBaseListBoardsRequest();
    return message;
  },
};

function createBaseListBoardsResponse(): ListBoardsResponse {
  return { boards: [] };
}

export const ListBoardsResponse: MessageFns<ListBoardsResponse> = {
  encode(message: ListBoardsResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.boards) {
      Board.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): ListBoardsResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseListBoardsResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.boards.push(Board.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): ListBoardsResponse {
    return { boards: globalThis.Array.isArray(object?.boards) ? object.boards.map((e: any) => Board.fromJSON(e)) : [] };
  },

  toJSON(message: ListBoardsResponse): unknown {
    const obj: any = {};
    if (message.boards?.length) {
      obj.boards = message.boards.map((e) => Board.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<ListBoardsResponse>, I>>(base?: I): ListBoardsResponse {
    return ListBoardsResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<ListBoardsResponse>, I>>(object: I): ListBoardsResponse {
    const message = createBaseListBoardsResponse();
    message.boards = object.boards?.map((e) => Board.fromPartial(e)) || [];
    return message;
  },
};

function createBaseGetBoardByIdRequest(): GetBoardByIdRequest {
  return { id: 0 };
}

export const GetBoardByIdRequest: MessageFns<GetBoardByIdRequest> = {
  encode(message: GetBoardByIdRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBoardByIdRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBoardByIdRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBoardByIdRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: GetBoardByIdRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBoardByIdRequest>, I>>(base?: I): GetBoardByIdRequest {
    return GetBoardByIdRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBoardByIdRequest>, I>>(object: I): GetBoardByIdRequest {
    const message = createBaseGetBoardByIdRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseGetBoardByIdResponse(): GetBoardByIdResponse {
  return { board: undefined };
}

export const GetBoardByIdResponse: MessageFns<GetBoardByIdResponse> = {
  encode(message: GetBoardByIdResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.board !== undefined) {
      Board.encode(message.board, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetBoardByIdResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetBoardByIdResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.board = Board.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetBoardByIdResponse {
    return { board: isSet(object.board) ? Board.fromJSON(object.board) : undefined };
  },

  toJSON(message: GetBoardByIdResponse): unknown {
    const obj: any = {};
    if (message.board !== undefined) {
      obj.board = Board.toJSON(message.board);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetBoardByIdResponse>, I>>(base?: I): GetBoardByIdResponse {
    return GetBoardByIdResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetBoardByIdResponse>, I>>(object: I): GetBoardByIdResponse {
    const message = createBaseGetBoardByIdResponse();
    message.board = (object.board !== undefined && object.board !== null) ? Board.fromPartial(object.board) : undefined;
    return message;
  },
};

export type BoardServiceService = typeof BoardServiceService;
export const BoardServiceService = {
  createBoard: {
    path: "/BoardService/CreateBoard",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateBoardRequest) => Buffer.from(CreateBoardRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateBoardRequest.decode(value),
    responseSerialize: (value: CreateBoardResponse) => Buffer.from(CreateBoardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateBoardResponse.decode(value),
  },
  deleteBoard: {
    path: "/BoardService/DeleteBoard",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteBoardRequest) => Buffer.from(DeleteBoardRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteBoardRequest.decode(value),
    responseSerialize: (value: DeleteBoardResponse) => Buffer.from(DeleteBoardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteBoardResponse.decode(value),
  },
  listBoards: {
    path: "/BoardService/ListBoards",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: ListBoardsRequest) => Buffer.from(ListBoardsRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => ListBoardsRequest.decode(value),
    responseSerialize: (value: ListBoardsResponse) => Buffer.from(ListBoardsResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => ListBoardsResponse.decode(value),
  },
  getBoardById: {
    path: "/BoardService/GetBoardById",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetBoardByIdRequest) => Buffer.from(GetBoardByIdRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetBoardByIdRequest.decode(value),
    responseSerialize: (value: GetBoardByIdResponse) => Buffer.from(GetBoardByIdResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetBoardByIdResponse.decode(value),
  },
} as const;

export interface BoardServiceServer extends UntypedServiceImplementation {
  createBoard: handleUnaryCall<CreateBoardRequest, CreateBoardResponse>;
  deleteBoard: handleUnaryCall<DeleteBoardRequest, DeleteBoardResponse>;
  listBoards: handleUnaryCall<ListBoardsRequest, ListBoardsResponse>;
  getBoardById: handleUnaryCall<GetBoardByIdRequest, GetBoardByIdResponse>;
}

export interface BoardServiceClient extends Client {
  createBoard(
    request: CreateBoardRequest,
    callback: (error: ServiceError | null, response: CreateBoardResponse) => void,
  ): ClientUnaryCall;
  createBoard(
    request: CreateBoardRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateBoardResponse) => void,
  ): ClientUnaryCall;
  createBoard(
    request: CreateBoardRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateBoardResponse) => void,
  ): ClientUnaryCall;
  deleteBoard(
    request: DeleteBoardRequest,
    callback: (error: ServiceError | null, response: DeleteBoardResponse) => void,
  ): ClientUnaryCall;
  deleteBoard(
    request: DeleteBoardRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteBoardResponse) => void,
  ): ClientUnaryCall;
  deleteBoard(
    request: DeleteBoardRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteBoardResponse) => void,
  ): ClientUnaryCall;
  listBoards(
    request: ListBoardsRequest,
    callback: (error: ServiceError | null, response: ListBoardsResponse) => void,
  ): ClientUnaryCall;
  listBoards(
    request: ListBoardsRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: ListBoardsResponse) => void,
  ): ClientUnaryCall;
  listBoards(
    request: ListBoardsRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: ListBoardsResponse) => void,
  ): ClientUnaryCall;
  getBoardById(
    request: GetBoardByIdRequest,
    callback: (error: ServiceError | null, response: GetBoardByIdResponse) => void,
  ): ClientUnaryCall;
  getBoardById(
    request: GetBoardByIdRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetBoardByIdResponse) => void,
  ): ClientUnaryCall;
  getBoardById(
    request: GetBoardByIdRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetBoardByIdResponse) => void,
  ): ClientUnaryCall;
}

export const BoardServiceClient = makeGenericClientConstructor(BoardServiceService, "BoardService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): BoardServiceClient;
  service: typeof BoardServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
