// Code generated by protoc-gen-ts_proto. DO NOT EDIT.
// versions:
//   protoc-gen-ts_proto  v2.2.3
//   protoc               v3.20.3
// source: task.proto

/* eslint-disable */
import { BinaryReader, BinaryWriter } from "@bufbuild/protobuf/wire";
import {
  type CallOptions,
  ChannelCredentials,
  Client,
  type ClientOptions,
  type ClientUnaryCall,
  type handleUnaryCall,
  makeGenericClientConstructor,
  Metadata,
  type ServiceError,
  type UntypedServiceImplementation,
} from "@grpc/grpc-js";

export const protobufPackage = "";

export enum TaskStatus {
  TODO = 0,
  IN_PROGRESS = 1,
  DONE = 2,
  UNRECOGNIZED = -1,
}

export function taskStatusFromJSON(object: any): TaskStatus {
  switch (object) {
    case 0:
    case "TODO":
      return TaskStatus.TODO;
    case 1:
    case "IN_PROGRESS":
      return TaskStatus.IN_PROGRESS;
    case 2:
    case "DONE":
      return TaskStatus.DONE;
    case -1:
    case "UNRECOGNIZED":
    default:
      return TaskStatus.UNRECOGNIZED;
  }
}

export function taskStatusToJSON(object: TaskStatus): string {
  switch (object) {
    case TaskStatus.TODO:
      return "TODO";
    case TaskStatus.IN_PROGRESS:
      return "IN_PROGRESS";
    case TaskStatus.DONE:
      return "DONE";
    case TaskStatus.UNRECOGNIZED:
    default:
      return "UNRECOGNIZED";
  }
}

export interface Task {
  id: number;
  title: string;
  description: string;
  status: TaskStatus;
  boardId: number;
  createdAt: string;
}

export interface CreateTaskRequest {
  title: string;
  description: string;
  status: TaskStatus;
  boardId: number;
}

export interface CreateTaskResponse {
  task: Task | undefined;
}

export interface UpdateTaskStatusRequest {
  taskId: number;
  status: TaskStatus;
}

export interface UpdateTaskStatusResponse {
  success: boolean;
}

export interface GetTasksForBoardRequest {
  boardId: number;
}

export interface GetTasksForBoardResponse {
  tasks: Task[];
}

export interface DeleteTaskRequest {
  id: number;
}

export interface DeleteTaskResponse {
  success: boolean;
}

function createBaseTask(): Task {
  return { id: 0, title: "", description: "", status: 0, boardId: 0, createdAt: "" };
}

export const Task: MessageFns<Task> = {
  encode(message: Task, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    if (message.title !== "") {
      writer.uint32(18).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(26).string(message.description);
    }
    if (message.status !== 0) {
      writer.uint32(32).int32(message.status);
    }
    if (message.boardId !== 0) {
      writer.uint32(40).int32(message.boardId);
    }
    if (message.createdAt !== "") {
      writer.uint32(50).string(message.createdAt);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): Task {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseTask();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 26) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 5: {
          if (tag !== 40) {
            break;
          }

          message.boardId = reader.int32();
          continue;
        }
        case 6: {
          if (tag !== 50) {
            break;
          }

          message.createdAt = reader.string();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): Task {
    return {
      id: isSet(object.id) ? globalThis.Number(object.id) : 0,
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      status: isSet(object.status) ? taskStatusFromJSON(object.status) : 0,
      boardId: isSet(object.boardId) ? globalThis.Number(object.boardId) : 0,
      createdAt: isSet(object.createdAt) ? globalThis.String(object.createdAt) : "",
    };
  },

  toJSON(message: Task): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.status !== 0) {
      obj.status = taskStatusToJSON(message.status);
    }
    if (message.boardId !== 0) {
      obj.boardId = Math.round(message.boardId);
    }
    if (message.createdAt !== "") {
      obj.createdAt = message.createdAt;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<Task>, I>>(base?: I): Task {
    return Task.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<Task>, I>>(object: I): Task {
    const message = createBaseTask();
    message.id = object.id ?? 0;
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.status = object.status ?? 0;
    message.boardId = object.boardId ?? 0;
    message.createdAt = object.createdAt ?? "";
    return message;
  },
};

function createBaseCreateTaskRequest(): CreateTaskRequest {
  return { title: "", description: "", status: 0, boardId: 0 };
}

export const CreateTaskRequest: MessageFns<CreateTaskRequest> = {
  encode(message: CreateTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.title !== "") {
      writer.uint32(10).string(message.title);
    }
    if (message.description !== "") {
      writer.uint32(18).string(message.description);
    }
    if (message.status !== 0) {
      writer.uint32(24).int32(message.status);
    }
    if (message.boardId !== 0) {
      writer.uint32(32).int32(message.boardId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.title = reader.string();
          continue;
        }
        case 2: {
          if (tag !== 18) {
            break;
          }

          message.description = reader.string();
          continue;
        }
        case 3: {
          if (tag !== 24) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
        case 4: {
          if (tag !== 32) {
            break;
          }

          message.boardId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTaskRequest {
    return {
      title: isSet(object.title) ? globalThis.String(object.title) : "",
      description: isSet(object.description) ? globalThis.String(object.description) : "",
      status: isSet(object.status) ? taskStatusFromJSON(object.status) : 0,
      boardId: isSet(object.boardId) ? globalThis.Number(object.boardId) : 0,
    };
  },

  toJSON(message: CreateTaskRequest): unknown {
    const obj: any = {};
    if (message.title !== "") {
      obj.title = message.title;
    }
    if (message.description !== "") {
      obj.description = message.description;
    }
    if (message.status !== 0) {
      obj.status = taskStatusToJSON(message.status);
    }
    if (message.boardId !== 0) {
      obj.boardId = Math.round(message.boardId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTaskRequest>, I>>(base?: I): CreateTaskRequest {
    return CreateTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTaskRequest>, I>>(object: I): CreateTaskRequest {
    const message = createBaseCreateTaskRequest();
    message.title = object.title ?? "";
    message.description = object.description ?? "";
    message.status = object.status ?? 0;
    message.boardId = object.boardId ?? 0;
    return message;
  },
};

function createBaseCreateTaskResponse(): CreateTaskResponse {
  return { task: undefined };
}

export const CreateTaskResponse: MessageFns<CreateTaskResponse> = {
  encode(message: CreateTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.task !== undefined) {
      Task.encode(message.task, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): CreateTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseCreateTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.task = Task.decode(reader, reader.uint32());
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): CreateTaskResponse {
    return { task: isSet(object.task) ? Task.fromJSON(object.task) : undefined };
  },

  toJSON(message: CreateTaskResponse): unknown {
    const obj: any = {};
    if (message.task !== undefined) {
      obj.task = Task.toJSON(message.task);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<CreateTaskResponse>, I>>(base?: I): CreateTaskResponse {
    return CreateTaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<CreateTaskResponse>, I>>(object: I): CreateTaskResponse {
    const message = createBaseCreateTaskResponse();
    message.task = (object.task !== undefined && object.task !== null) ? Task.fromPartial(object.task) : undefined;
    return message;
  },
};

function createBaseUpdateTaskStatusRequest(): UpdateTaskStatusRequest {
  return { taskId: 0, status: 0 };
}

export const UpdateTaskStatusRequest: MessageFns<UpdateTaskStatusRequest> = {
  encode(message: UpdateTaskStatusRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.taskId !== 0) {
      writer.uint32(8).int32(message.taskId);
    }
    if (message.status !== 0) {
      writer.uint32(16).int32(message.status);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTaskStatusRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTaskStatusRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.taskId = reader.int32();
          continue;
        }
        case 2: {
          if (tag !== 16) {
            break;
          }

          message.status = reader.int32() as any;
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTaskStatusRequest {
    return {
      taskId: isSet(object.taskId) ? globalThis.Number(object.taskId) : 0,
      status: isSet(object.status) ? taskStatusFromJSON(object.status) : 0,
    };
  },

  toJSON(message: UpdateTaskStatusRequest): unknown {
    const obj: any = {};
    if (message.taskId !== 0) {
      obj.taskId = Math.round(message.taskId);
    }
    if (message.status !== 0) {
      obj.status = taskStatusToJSON(message.status);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTaskStatusRequest>, I>>(base?: I): UpdateTaskStatusRequest {
    return UpdateTaskStatusRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTaskStatusRequest>, I>>(object: I): UpdateTaskStatusRequest {
    const message = createBaseUpdateTaskStatusRequest();
    message.taskId = object.taskId ?? 0;
    message.status = object.status ?? 0;
    return message;
  },
};

function createBaseUpdateTaskStatusResponse(): UpdateTaskStatusResponse {
  return { success: false };
}

export const UpdateTaskStatusResponse: MessageFns<UpdateTaskStatusResponse> = {
  encode(message: UpdateTaskStatusResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): UpdateTaskStatusResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseUpdateTaskStatusResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): UpdateTaskStatusResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: UpdateTaskStatusResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<UpdateTaskStatusResponse>, I>>(base?: I): UpdateTaskStatusResponse {
    return UpdateTaskStatusResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<UpdateTaskStatusResponse>, I>>(object: I): UpdateTaskStatusResponse {
    const message = createBaseUpdateTaskStatusResponse();
    message.success = object.success ?? false;
    return message;
  },
};

function createBaseGetTasksForBoardRequest(): GetTasksForBoardRequest {
  return { boardId: 0 };
}

export const GetTasksForBoardRequest: MessageFns<GetTasksForBoardRequest> = {
  encode(message: GetTasksForBoardRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.boardId !== 0) {
      writer.uint32(8).int32(message.boardId);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTasksForBoardRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTasksForBoardRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.boardId = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTasksForBoardRequest {
    return { boardId: isSet(object.boardId) ? globalThis.Number(object.boardId) : 0 };
  },

  toJSON(message: GetTasksForBoardRequest): unknown {
    const obj: any = {};
    if (message.boardId !== 0) {
      obj.boardId = Math.round(message.boardId);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTasksForBoardRequest>, I>>(base?: I): GetTasksForBoardRequest {
    return GetTasksForBoardRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTasksForBoardRequest>, I>>(object: I): GetTasksForBoardRequest {
    const message = createBaseGetTasksForBoardRequest();
    message.boardId = object.boardId ?? 0;
    return message;
  },
};

function createBaseGetTasksForBoardResponse(): GetTasksForBoardResponse {
  return { tasks: [] };
}

export const GetTasksForBoardResponse: MessageFns<GetTasksForBoardResponse> = {
  encode(message: GetTasksForBoardResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    for (const v of message.tasks) {
      Task.encode(v!, writer.uint32(10).fork()).join();
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): GetTasksForBoardResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseGetTasksForBoardResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 10) {
            break;
          }

          message.tasks.push(Task.decode(reader, reader.uint32()));
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): GetTasksForBoardResponse {
    return { tasks: globalThis.Array.isArray(object?.tasks) ? object.tasks.map((e: any) => Task.fromJSON(e)) : [] };
  },

  toJSON(message: GetTasksForBoardResponse): unknown {
    const obj: any = {};
    if (message.tasks?.length) {
      obj.tasks = message.tasks.map((e) => Task.toJSON(e));
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<GetTasksForBoardResponse>, I>>(base?: I): GetTasksForBoardResponse {
    return GetTasksForBoardResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<GetTasksForBoardResponse>, I>>(object: I): GetTasksForBoardResponse {
    const message = createBaseGetTasksForBoardResponse();
    message.tasks = object.tasks?.map((e) => Task.fromPartial(e)) || [];
    return message;
  },
};

function createBaseDeleteTaskRequest(): DeleteTaskRequest {
  return { id: 0 };
}

export const DeleteTaskRequest: MessageFns<DeleteTaskRequest> = {
  encode(message: DeleteTaskRequest, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.id !== 0) {
      writer.uint32(8).int32(message.id);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTaskRequest {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTaskRequest();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.id = reader.int32();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTaskRequest {
    return { id: isSet(object.id) ? globalThis.Number(object.id) : 0 };
  },

  toJSON(message: DeleteTaskRequest): unknown {
    const obj: any = {};
    if (message.id !== 0) {
      obj.id = Math.round(message.id);
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTaskRequest>, I>>(base?: I): DeleteTaskRequest {
    return DeleteTaskRequest.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTaskRequest>, I>>(object: I): DeleteTaskRequest {
    const message = createBaseDeleteTaskRequest();
    message.id = object.id ?? 0;
    return message;
  },
};

function createBaseDeleteTaskResponse(): DeleteTaskResponse {
  return { success: false };
}

export const DeleteTaskResponse: MessageFns<DeleteTaskResponse> = {
  encode(message: DeleteTaskResponse, writer: BinaryWriter = new BinaryWriter()): BinaryWriter {
    if (message.success !== false) {
      writer.uint32(8).bool(message.success);
    }
    return writer;
  },

  decode(input: BinaryReader | Uint8Array, length?: number): DeleteTaskResponse {
    const reader = input instanceof BinaryReader ? input : new BinaryReader(input);
    let end = length === undefined ? reader.len : reader.pos + length;
    const message = createBaseDeleteTaskResponse();
    while (reader.pos < end) {
      const tag = reader.uint32();
      switch (tag >>> 3) {
        case 1: {
          if (tag !== 8) {
            break;
          }

          message.success = reader.bool();
          continue;
        }
      }
      if ((tag & 7) === 4 || tag === 0) {
        break;
      }
      reader.skip(tag & 7);
    }
    return message;
  },

  fromJSON(object: any): DeleteTaskResponse {
    return { success: isSet(object.success) ? globalThis.Boolean(object.success) : false };
  },

  toJSON(message: DeleteTaskResponse): unknown {
    const obj: any = {};
    if (message.success !== false) {
      obj.success = message.success;
    }
    return obj;
  },

  create<I extends Exact<DeepPartial<DeleteTaskResponse>, I>>(base?: I): DeleteTaskResponse {
    return DeleteTaskResponse.fromPartial(base ?? ({} as any));
  },
  fromPartial<I extends Exact<DeepPartial<DeleteTaskResponse>, I>>(object: I): DeleteTaskResponse {
    const message = createBaseDeleteTaskResponse();
    message.success = object.success ?? false;
    return message;
  },
};

export type TaskServiceService = typeof TaskServiceService;
export const TaskServiceService = {
  createTask: {
    path: "/TaskService/CreateTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: CreateTaskRequest) => Buffer.from(CreateTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => CreateTaskRequest.decode(value),
    responseSerialize: (value: CreateTaskResponse) => Buffer.from(CreateTaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => CreateTaskResponse.decode(value),
  },
  updateTaskStatus: {
    path: "/TaskService/UpdateTaskStatus",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: UpdateTaskStatusRequest) => Buffer.from(UpdateTaskStatusRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => UpdateTaskStatusRequest.decode(value),
    responseSerialize: (value: UpdateTaskStatusResponse) =>
      Buffer.from(UpdateTaskStatusResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => UpdateTaskStatusResponse.decode(value),
  },
  getTasksForBoard: {
    path: "/TaskService/GetTasksForBoard",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: GetTasksForBoardRequest) => Buffer.from(GetTasksForBoardRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => GetTasksForBoardRequest.decode(value),
    responseSerialize: (value: GetTasksForBoardResponse) =>
      Buffer.from(GetTasksForBoardResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => GetTasksForBoardResponse.decode(value),
  },
  deleteTask: {
    path: "/TaskService/DeleteTask",
    requestStream: false,
    responseStream: false,
    requestSerialize: (value: DeleteTaskRequest) => Buffer.from(DeleteTaskRequest.encode(value).finish()),
    requestDeserialize: (value: Buffer) => DeleteTaskRequest.decode(value),
    responseSerialize: (value: DeleteTaskResponse) => Buffer.from(DeleteTaskResponse.encode(value).finish()),
    responseDeserialize: (value: Buffer) => DeleteTaskResponse.decode(value),
  },
} as const;

export interface TaskServiceServer extends UntypedServiceImplementation {
  createTask: handleUnaryCall<CreateTaskRequest, CreateTaskResponse>;
  updateTaskStatus: handleUnaryCall<UpdateTaskStatusRequest, UpdateTaskStatusResponse>;
  getTasksForBoard: handleUnaryCall<GetTasksForBoardRequest, GetTasksForBoardResponse>;
  deleteTask: handleUnaryCall<DeleteTaskRequest, DeleteTaskResponse>;
}

export interface TaskServiceClient extends Client {
  createTask(
    request: CreateTaskRequest,
    callback: (error: ServiceError | null, response: CreateTaskResponse) => void,
  ): ClientUnaryCall;
  createTask(
    request: CreateTaskRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: CreateTaskResponse) => void,
  ): ClientUnaryCall;
  createTask(
    request: CreateTaskRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: CreateTaskResponse) => void,
  ): ClientUnaryCall;
  updateTaskStatus(
    request: UpdateTaskStatusRequest,
    callback: (error: ServiceError | null, response: UpdateTaskStatusResponse) => void,
  ): ClientUnaryCall;
  updateTaskStatus(
    request: UpdateTaskStatusRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: UpdateTaskStatusResponse) => void,
  ): ClientUnaryCall;
  updateTaskStatus(
    request: UpdateTaskStatusRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: UpdateTaskStatusResponse) => void,
  ): ClientUnaryCall;
  getTasksForBoard(
    request: GetTasksForBoardRequest,
    callback: (error: ServiceError | null, response: GetTasksForBoardResponse) => void,
  ): ClientUnaryCall;
  getTasksForBoard(
    request: GetTasksForBoardRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: GetTasksForBoardResponse) => void,
  ): ClientUnaryCall;
  getTasksForBoard(
    request: GetTasksForBoardRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: GetTasksForBoardResponse) => void,
  ): ClientUnaryCall;
  deleteTask(
    request: DeleteTaskRequest,
    callback: (error: ServiceError | null, response: DeleteTaskResponse) => void,
  ): ClientUnaryCall;
  deleteTask(
    request: DeleteTaskRequest,
    metadata: Metadata,
    callback: (error: ServiceError | null, response: DeleteTaskResponse) => void,
  ): ClientUnaryCall;
  deleteTask(
    request: DeleteTaskRequest,
    metadata: Metadata,
    options: Partial<CallOptions>,
    callback: (error: ServiceError | null, response: DeleteTaskResponse) => void,
  ): ClientUnaryCall;
}

export const TaskServiceClient = makeGenericClientConstructor(TaskServiceService, "TaskService") as unknown as {
  new (address: string, credentials: ChannelCredentials, options?: Partial<ClientOptions>): TaskServiceClient;
  service: typeof TaskServiceService;
  serviceName: string;
};

type Builtin = Date | Function | Uint8Array | string | number | boolean | undefined;

export type DeepPartial<T> = T extends Builtin ? T
  : T extends globalThis.Array<infer U> ? globalThis.Array<DeepPartial<U>>
  : T extends ReadonlyArray<infer U> ? ReadonlyArray<DeepPartial<U>>
  : T extends {} ? { [K in keyof T]?: DeepPartial<T[K]> }
  : Partial<T>;

type KeysOfUnion<T> = T extends T ? keyof T : never;
export type Exact<P, I extends P> = P extends Builtin ? P
  : P & { [K in keyof P]: Exact<P[K], I[K]> } & { [K in Exclude<keyof I, KeysOfUnion<P>>]: never };

function isSet(value: any): boolean {
  return value !== null && value !== undefined;
}

export interface MessageFns<T> {
  encode(message: T, writer?: BinaryWriter): BinaryWriter;
  decode(input: BinaryReader | Uint8Array, length?: number): T;
  fromJSON(object: any): T;
  toJSON(message: T): unknown;
  create<I extends Exact<DeepPartial<T>, I>>(base?: I): T;
  fromPartial<I extends Exact<DeepPartial<T>, I>>(object: I): T;
}
